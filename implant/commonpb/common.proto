syntax = "proto3";

package commonpb;
option go_package = "github.com/chainreactors/malice-network/proto/implant/commonpb";

import "implant/pluginpb/plugin.proto";

message Empty {
}

// implant call and back data
message Spite {
  uint32 task_id = 1;
  bool  async = 2;
  uint64 timeout = 3;
  bool end = 4;
  string name = 5;
  string error = 6; // basic error
  AsyncStatus status = 7;

  oneof body {
    Empty empty = 10;
	  Block block = 11;
    AsyncACK async_ack = 13;
    Register register = 21;
    Ping ping = 22;
    Suicide suicide = 23;
    CommonRequest common_request = 26;
    CommonResponse common_response = 27;
    pluginpb.ExecRequest exec_request = 104;
    pluginpb.ExecResponse exec_response = 105;
    pluginpb.UploadRequest upload_request = 106;
    pluginpb.DownloadRequest download_request = 107;
    pluginpb.LoadAssembly load_assembly = 108;
    pluginpb.ExecuteLoadAssembly execute_load_assembly = 109;
    pluginpb.ExecuteAssembly execute_assembly = 110;
    pluginpb.AssemblyResponse assembly_response = 111;
  }
}

message Spites {
  repeated Spite spites = 1;
}


message Register {
  string name = 1;
  string filepath = 2;
  string proxy = 3;
  repeated string module = 4;
  repeated string extension = 5;
  Os os = 11;
  Process process = 12;
  Timer timer = 13;
}

message Ping{
  int32 nonce = 1;
}

message Suicide {
  int32 type = 1;
  int64 timestamp = 2;
}

message CommonRequest {
  string name = 1;
  repeated string params = 2;
}

message CommonResponse {
  string name = 1;
  bytes content = 2;
  string err = 3;
}

message Os {
  string name = 1;
  string version = 2;
  string arch = 3;
  string username = 4;
  string hostname = 5;
  string locale = 6;
}

message Process {
  string uid = 1;
  int32 pid = 2;
  string gid = 3;
  string name = 4;
  string args = 5;
}

message Timer {
  uint64 interval = 1;
  uint64 jitter = 2;
  uint64 heartbeat = 3;
  uint64 last_checkin = 4;
}

message Block{
  uint32 block_id = 1;
  bytes content = 2;
}

message AsyncACK {
  bool success = 1;
  bool end = 2;
}

message AsyncStatus{
  uint32 task_id = 1;
  int32 status = 2;
  string error = 3;  //std err
  oneof msg {
    pluginpb.DownloadResponse download_response = 10;
  }
}
