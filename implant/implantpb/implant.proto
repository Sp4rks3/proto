syntax = "proto3";
package implantpb;

option go_package = "github.com/chainreactors/malice-network/proto/implant/implantpb";

message Empty {
}

// implant call and back data
message Spite {
  string name = 1;
  uint32 task_id = 2;
  bool  async = 3;
  uint64 timeout = 4;
  uint32 error = 5;
  Status status = 6;

  oneof body {
    Empty empty = 10;
    Block block = 11;
    AsyncACK async_ack = 13;
    Register register = 21;
    Ping ping = 22;
    Suicide suicide = 23;
    Request request = 24;
    Response response = 25;
    LoadModule  load_module = 31;
    Modules  modules = 32;
    Extensions extensions = 40;
    LoadExtension load_extension = 41;
    ExecuteExtension execute_extension = 42;
    LsResponse ls_response = 101;
    ChownRequest chown_request = 102;
    ExecRequest exec_request = 104;
    ExecResponse exec_response = 105;
    UploadRequest upload_request = 106;
    DownloadRequest download_request = 107;
    DownloadResponse download_response = 121;
    PsResponse ps_response = 108;
    NetstatResponse netstat_response = 109;
    AssemblyResponse assembly_response = 110;
    ExecuteAssembly execute_assembly = 111;
    ExecuteBof execute_bof = 112;
    ExecuteSideLoad execute_sideload = 113;
    ExecuteSpawn execute_spawn = 114;
    ExecuteShellcode execute_shellcode = 115;
    RegistryRequest registry_request = 116;
    RegistryWriteRequest registry_write_request = 117;
    IfconfigResponse ifconfig_response = 118;
    CurlRequest curl_request = 119;
  }
}

message Spites {
  repeated Spite spites = 1;
}

message Status{
  uint32 task_id = 1;
  int32 status = 2;  // unexcept error
  string error = 3;  //std err
  oneof msg{
    string output = 4;
  };
}

message Ping{
  int32 nonce = 1;
}

message Register {
  string name = 1;
  string filepath = 2;
  string proxy = 3;
  repeated string module = 4;
  repeated string extension = 5;
  Os os = 11;
  Process process = 12;
  Timer timer = 13;
}

message Suicide {
  int32 type = 1;
  int64 timestamp = 2;
}


// common empty request
message Request {
  string name = 1;
  string input = 2;
  repeated string args = 3;
  map<string, string> params = 4;
}

message Response {
  string output = 1;
  string error = 2;
  map<string, string> kv = 3;
}

message NetInterface {
  int32 index = 1;
  string name = 2;
  string mac = 3;
  repeated string ip_addresses = 4;
}

message SockTabEntry {
  string local_addr = 1;
  string remote_addr = 2;
  string skState = 3;
//  uint32 uid = 4;
  string pid = 5;
  string protocol = 6;
}

message NetstatResponse {
  repeated SockTabEntry socks = 1;
}

message Block{
  uint32 block_id = 1;
  bytes content = 2;
  bool end = 3;
}

message AsyncACK {
  uint32 id = 1;
  bool success = 2;
  bool end = 3;
}

message Os {
  string name = 1;
  string version = 2; // kernel version
  string release = 3; // release version
  string arch = 4;
  string username = 5;
  string hostname = 6;
  string locale = 7; // timezone
}

message Process {
  string name = 1;
  uint32 pid = 2;
  uint32 ppid = 3;
  string owner = 4;
  string arch = 5;
  string path = 6;
  string args = 7;
}

message Timer {
  uint64 interval = 1;
  uint64 jitter = 2;
  uint64 heartbeat = 3;
  uint64 last_checkin = 4;
}

message FileInfo {
  string Name = 1;
  bool IsDir = 2;
  uint64 Size = 3;
  int64 ModTime = 4;
  uint32 Mode = 5;
  string Link = 6;
}

message LsResponse {
  string Path = 1;
  bool Exists = 2;
  repeated FileInfo Files = 3;
}

message PsResponse{
  repeated Process processes = 1;
}

message ExecRequest {
  string path = 1;
  repeated string args = 2;
  bool output = 3;
  string stdout = 4;
  string stderr = 5;
  uint32 ppid = 10;
}

message ExecResponse {
  int32 status_code = 1;
  bytes stdout = 2;
  bytes stderr = 3;
  uint32 pid = 4;
}

message Modules {
  repeated string modules = 1;
}

message LoadModule{
  bytes bin = 2;
  string bundle = 3;
}

message Extensions {
  repeated string extensions = 1;
}

message LoadExtension{
  string name = 1;
  string type = 2;
  bytes bin = 3;
}

message ExecuteExtension {
  string name = 1;
  string type = 2;
  repeated string params = 3;
}

message ExecuteAssembly {
  string name = 1;
  bytes bin = 2;
  string type = 3;
  repeated string params = 4;
  uint32 pid = 5;
}

message ExecuteSpawn {

}

message ExecuteSideLoad {

}

message ExecuteBof {
  string name = 1;
  bytes bin = 2;
  string type = 3;
  repeated string params = 4;
  string entry_point = 5;
}

message ExecuteShellcode {
  string name = 1;
  bytes bin = 2;
  string type = 3;
  repeated string params = 4;
  uint32 pid = 5;

  // server only
  string encoder = 6;
  int32  iterations = 7;
  bytes badchars = 8;
}

message AssemblyResponse {
  bytes data = 1;
  int32 status = 2;
  string err = 3;
}

message UploadRequest {
  string name = 1;
  string target = 2;
  uint32 priv = 3;
  bytes data = 4;
  bool hidden = 5;
}

message DownloadRequest {
  string path = 1;
  string name = 2;
  uint32 buffer_size = 3;
}

message DownloadResponse{
  string checksum = 1;
  uint64 size = 2;
}

message CurlRequest{
  string url = 1;
  int32 timeout = 2;
  string method = 3;
  bytes  body = 4;
  map<string, string> header =5;
  string hostname = 6;
}


message ChownRequest{
  string path = 1;
  string uid = 2;
  string gid = 3;
  bool recursive = 4;
}

message IfconfigResponse {
  repeated NetInterface net_interfaces = 1;
}


message RegistryRequest {
  string hive = 1;
  string path = 2;
  string key = 3;
}

message RegistryWriteRequest {
  string hive = 1;
  string path = 2;
  string key = 3;
  string string_value = 5;
  bytes byte_value = 6;
  uint32 dword_value = 7;
  uint64 qword_value = 8;
  uint32 type = 10;
}