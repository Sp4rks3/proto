syntax = "proto3";

package listenerrpc;
option go_package = "github.com/chainreactors/malice-network/helper/proto/services/listenerrpc";

import "implant/implantpb/implant.proto";
import "listener/lispb/listener.proto";
import "client/clientpb/client.proto";

service ImplantRPC {
  rpc Register(lispb.RegisterSession) returns (implantpb.Empty);
  rpc SysInfo(implantpb.SysInfo) returns (implantpb.Empty);
  rpc Ping(implantpb.Ping) returns (implantpb.Empty);
}

service ListenerRPC {
  rpc RegisterListener(lispb.RegisterListener) returns (implantpb.Empty);
  rpc RegisterPipeline(lispb.Pipeline) returns(implantpb.Empty);
  rpc RegisterWebsite(lispb.Pipeline) returns(lispb.WebsiteResponse);
  rpc StartTcpPipeline(lispb.CtrlPipeline) returns (clientpb.Empty);
  rpc StopTcpPipeline(lispb.CtrlPipeline) returns (clientpb.Empty);
  rpc ListTcpPipelines(lispb.ListenerName) returns (lispb.Pipelines);
  rpc StartWebsite(lispb.CtrlPipeline) returns (clientpb.Empty);
  rpc StopWebsite(lispb.CtrlPipeline) returns (clientpb.Empty);
  rpc UploadWebsite(lispb.WebsiteAssets) returns (clientpb.Empty);
  rpc ListWebsites(lispb.ListenerName) returns (lispb.Websites);

  //  rpc ListenerCtrl(lispb.CtrlStatus) returns (stream lispb.CtrlPipeline);
  rpc SpiteStream(stream lispb.SpiteSession) returns (stream lispb.SpiteSession);
  rpc JobStream(stream clientpb.JobStatus) returns (stream clientpb.JobCtrl);
}
