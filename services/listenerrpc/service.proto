syntax = "proto3";

package listenerrpc;
option go_package = "github.com/chainreactors/malice-network/helper/proto/services/listenerrpc";

import "client/clientpb/client.proto";
import "implant/implantpb/module.proto";

service ListenerRPC {
  rpc SpiteStream(stream clientpb.SpiteResponse) returns (stream clientpb.SpiteRequest);
  rpc JobStream(stream clientpb.JobStatus) returns (stream clientpb.JobCtrl);

  // implant
  rpc Register(clientpb.RegisterSession) returns (clientpb.Empty);
  rpc SysInfo(modulepb.SysInfo) returns (clientpb.Empty);
  rpc Checkin(modulepb.Ping) returns (clientpb.Empty);
  rpc InitBindSession(modulepb.Request) returns (clientpb.Empty);
  // pipeline
  rpc RegisterListener(clientpb.RegisterListener) returns (clientpb.Empty);
  rpc RegisterPipeline(clientpb.Pipeline) returns(clientpb.Empty);
  rpc StartPipeline(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc StopPipeline(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc DeletePipeline(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc ListPipelines(clientpb.Listener) returns (clientpb.Pipelines);
  rpc SyncPipeline(clientpb.Pipeline) returns (clientpb.Empty);
  // website
  rpc RegisterWebsite(clientpb.Pipeline) returns(clientpb.Empty);
  rpc StartWebsite(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc StopWebsite(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc DeleteWebsite(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc ListWebsites(clientpb.Listener) returns (clientpb.Pipelines);
  rpc ListWebContent(clientpb.Website) returns (clientpb.WebContents);
  rpc AddWebsiteContent(clientpb.Website) returns (clientpb.WebContent);
  rpc UpdateWebsiteContent(clientpb.WebContent)returns (clientpb.WebContent);
  rpc RemoveWebsiteContent(clientpb.WebContent)returns (clientpb.Empty);

  // rem
  rpc RegisterRem(clientpb.Pipeline) returns (clientpb.Empty);
  rpc StartRem(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc StopRem(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc DeleteRem(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc ListRems(clientpb.Listener) returns (clientpb.Pipelines);
  rpc HealthCheckRem(clientpb.Pipeline) returns (clientpb.Empty);
  rpc RemAgentCtrl(clientpb.REMAgent) returns (clientpb.Empty);
  rpc RemAgentStop(clientpb.REMAgent) returns (clientpb.Empty);
  rpc RemAgentLog(clientpb.REMAgent) returns (clientpb.RemLog);

  // generator
  rpc NewProfile(clientpb.Profile) returns (clientpb.Empty);
  rpc FindArtifact(clientpb.Artifact) returns (clientpb.Artifact);
  rpc Build(clientpb.BuildConfig) returns(clientpb.Builder);
  rpc DockerStatus(clientpb.Empty) returns (clientpb.Empty);
  rpc WorkflowStatus(clientpb.GithubWorkflowConfig) returns (clientpb.Empty);

  rpc GetArtifact(clientpb.Artifact) returns (clientpb.Artifact);
  //  rpc ListenerCtrl(clientpb.CtrlStatus) returns (stream clientpb.CtrlPipeline);
}
