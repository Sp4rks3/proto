syntax = "proto3";

package listenerrpc;
option go_package = "github.com/chainreactors/malice-network/helper/proto/services/listenerrpc";

import "implant/implantpb/implant.proto";
import "implant/implantpb/module.proto";
import "client/clientpb/client.proto";

service ImplantRPC {
  rpc Register(clientpb.RegisterSession) returns (implantpb.Empty);
  rpc SysInfo(modulepb.SysInfo) returns (implantpb.Empty);
  rpc Ping(modulepb.Ping) returns (implantpb.Empty);
}

service ListenerRPC {
  rpc RegisterListener(clientpb.RegisterListener) returns (implantpb.Empty);
  rpc RegisterPipeline(clientpb.Pipeline) returns(implantpb.Empty);
  rpc RegisterWebsite(clientpb.Pipeline) returns(clientpb.WebsiteResponse);
  rpc StartTcpPipeline(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc StopTcpPipeline(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc ListTcpPipelines(clientpb.ListenerName) returns (clientpb.Pipelines);
  rpc StartWebsite(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc StopWebsite(clientpb.CtrlPipeline) returns (clientpb.Empty);
  rpc UploadWebsite(clientpb.WebsiteAssets) returns (clientpb.Empty);
  rpc ListWebsites(clientpb.ListenerName) returns (clientpb.Websites);

  //  rpc ListenerCtrl(clientpb.CtrlStatus) returns (stream clientpb.CtrlPipeline);
  rpc SpiteStream(stream clientpb.SpiteSession) returns (stream clientpb.SpiteSession);
  rpc JobStream(stream clientpb.JobStatus) returns (stream clientpb.JobCtrl);
}
