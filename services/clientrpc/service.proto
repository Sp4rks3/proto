syntax = "proto3";

package clientrpc;
option go_package = "github.com/chainreactors/malice-network/proto/services/clientrpc";

import "client/clientpb/client.proto";
import "client/rootpb/root.proto";
import "implant/implantpb/implant.proto";
import "listener/lispb/listener.proto";

service MaliceRPC {
  // basic
  rpc Events(clientpb.Empty) returns (stream clientpb.Event); // start listen events / register client

  rpc GetBasic(clientpb.Empty) returns (clientpb.Basic);
  rpc GetClients(clientpb.Empty) returns (clientpb.Clients);
  rpc GetSessions(clientpb.Empty) returns (clientpb.Sessions);
  rpc GetListeners(clientpb.Empty) returns (clientpb.Listeners);
  rpc GetPipelines(clientpb.Empty) returns (lispb.Pipelines);
  rpc GetJobs(clientpb.Empty) returns (clientpb.Jobs);
  rpc GetTasks(clientpb.Session) returns (clientpb.Tasks);
  rpc GetTaskContent(clientpb.Task) returns (implantpb.Spite);
  rpc WaitTaskContent(clientpb.Task) returns (implantpb.Spite);
  rpc CancelBeaconTask(clientpb.Task) returns (clientpb.Task);
  rpc Broadcast(clientpb.Event) returns (clientpb.Empty); // broadcast event to all clients
  rpc LoginClient(clientpb.LoginReq) returns (clientpb.LoginResp);


  // implant
  // implant::file
  rpc Upload(implantpb.UploadRequest) returns (clientpb.Task);
  rpc Download(implantpb.DownloadRequest) returns (clientpb.Task);
  rpc Sync(clientpb.Sync) returns (clientpb.SyncResp);

  // implant::fs
  rpc Pwd(implantpb.Empty) returns (clientpb.Task);
  rpc Ls(implantpb.Request) returns (clientpb.Task);
  rpc Cd(implantpb.Request) returns (clientpb.Task);
  rpc Rm(implantpb.Request) returns (clientpb.Task);
  rpc Mv(implantpb.Request) returns (clientpb.Task);
  rpc Cp(implantpb.Request) returns (clientpb.Task);
  rpc Cat(implantpb.Request) returns (clientpb.Task);
  rpc Mkdir(implantpb.Request) returns (clientpb.Task);
  // implant::sys
  rpc Kill(implantpb.Request) returns (clientpb.Task);
  rpc Ps(implantpb.Request) returns (clientpb.Task);
  rpc Netstat(implantpb.Request) returns (clientpb.Task);
  rpc Curl(implantpb.CurlRequest) returns (clientpb.Task);
  // implant::module
  rpc ListModules(implantpb.Empty) returns (clientpb.Task);
  rpc LoadModule(implantpb.LoadModule) returns (clientpb.Task);
  rpc ListExtensions(implantpb.Empty) returns (clientpb.Task);
  rpc LoadExtension(implantpb.LoadExtension) returns (clientpb.Task);

  rpc Execute(implantpb.ExecRequest) returns (clientpb.Task);
  rpc ExecuteExtension(implantpb.ExecuteExtension) returns (clientpb.Task);
  rpc ExecuteSpawn(implantpb.ExecuteSpawn) returns (clientpb.Task);
  rpc ExecuteAssembly(implantpb.ExecuteAssembly) returns (clientpb.Task);
  rpc ExecuteSideLoad(implantpb.ExecuteSideLoad) returns (clientpb.Task);
  rpc ExecuteShellcode(implantpb.ExecuteShellcode) returns (clientpb.Task);
  rpc ExecuteBof(implantpb.ExecuteBof) returns (clientpb.Task);

  // listener
  rpc StartTcpPipeline(lispb.TCPPipeline) returns (clientpb.Empty);

  // Websites
  rpc Websites(clientpb.Empty) returns (clientpb.Websites);
  rpc Website(clientpb.Website) returns (clientpb.Website);
  rpc WebsiteRemove(clientpb.Website) returns (clientpb.Empty);
  rpc WebsiteAddContent(clientpb.WebsiteAddContent) returns (clientpb.Website);
  rpc WebsiteUpdateContent(clientpb.WebsiteAddContent)
      returns (clientpb.Website);
  rpc WebsiteRemoveContent(clientpb.WebsiteRemoveContent)
      returns (clientpb.Website);

  // plugin
  //  rpc GetPlugins(clientpb.Empty) returns (clientpb.Plugins);
  //  rpc InstallPlugin(clientpb.Plugin) returns (clientpb.Empty);
}

service RootRPC {
  // manager
  rpc AddClient(rootpb.Operator) returns(rootpb.Response);
  rpc RemoveClient(rootpb.Operator) returns (rootpb.Response);
  rpc ListClients(rootpb.Operator) returns(clientpb.Clients);
  rpc AddListener(rootpb.Operator) returns (rootpb.Response);
  rpc RemoveListener(rootpb.Operator) returns (rootpb.Response);
  rpc ListListeners(rootpb.Operator) returns(clientpb.Listeners);
}