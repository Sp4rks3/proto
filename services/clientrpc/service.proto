syntax = "proto3";

package clientrpc;
option go_package = "github.com/chainreactors/malice-network/proto/services/clientrpc";

import "client/clientpb/client.proto";
import "client/rootpb/root.proto";
import "implant/implantpb/implant.proto";
import "listener/lispb/listener.proto";

service MaliceRPC {
  // basic
  rpc LoginClient(clientpb.LoginReq) returns (clientpb.Client);
  rpc GetBasic(clientpb.Empty) returns (clientpb.Basic);
  rpc GetClients(clientpb.Empty) returns (clientpb.Clients);
  rpc GetSessions(clientpb.Empty) returns (clientpb.Sessions);
  rpc GetAlivedSessions(clientpb.Empty) returns (clientpb.Sessions);
  rpc GetSession(clientpb.SessionRequest) returns (clientpb.Session);
  rpc BasicSessionOP(clientpb.BasicUpdateSession) returns(clientpb.Empty);

  rpc GetListeners(clientpb.Empty) returns (clientpb.Listeners);
  rpc GetPipelines(clientpb.Empty) returns (lispb.Pipelines);
  rpc GetJobs(clientpb.Empty) returns (clientpb.Jobs);

  rpc GetTasks(clientpb.Session) returns (clientpb.Tasks);
  rpc GetTaskContent(clientpb.Task) returns (clientpb.TaskContext);
  rpc GetTaskFiles(clientpb.Session) returns(clientpb.Files);
  rpc WaitTaskContent(clientpb.Task) returns (clientpb.TaskContext);
  rpc WaitTaskFinish(clientpb.Task) returns (clientpb.TaskContext);
  rpc GetAllTaskContent(clientpb.Task) returns (clientpb.TaskContexts);

  rpc GetFiles(clientpb.Session) returns (clientpb.Files);
  // event
  rpc Events(clientpb.Empty) returns (stream clientpb.Event); // start listen events / register client
  rpc Broadcast(clientpb.Event) returns (clientpb.Empty); // broadcast event to all clients
  rpc Notify(clientpb.Event) returns (clientpb.Empty); // notify event to specific client
  rpc SessionEvent(clientpb.Event) returns (clientpb.Empty);

  // implant
  // implant::file
  rpc Upload(implantpb.UploadRequest) returns (clientpb.Task);
  rpc Download(implantpb.DownloadRequest) returns (clientpb.Task);
  rpc Sync(clientpb.Sync) returns (clientpb.SyncResp);

  // implant::fs
  rpc Pwd(implantpb.Request) returns (clientpb.Task);
  rpc Ls(implantpb.Request) returns (clientpb.Task);
  rpc Cd(implantpb.Request) returns (clientpb.Task);
  rpc Rm(implantpb.Request) returns (clientpb.Task);
  rpc Mv(implantpb.Request) returns (clientpb.Task);
  rpc Cp(implantpb.Request) returns (clientpb.Task);
  rpc Cat(implantpb.Request) returns (clientpb.Task);
  rpc Mkdir(implantpb.Request) returns (clientpb.Task);
  rpc Chmod(implantpb.Request) returns (clientpb.Task);
  rpc Chown(implantpb.ChownRequest) returns (clientpb.Task);
  // implant::sys
  rpc Kill(implantpb.Request) returns (clientpb.Task);
  rpc Ps(implantpb.Request) returns (clientpb.Task);
  rpc Netstat(implantpb.Request) returns (clientpb.Task);
  rpc Curl(implantpb.CurlRequest) returns (clientpb.Task);
  rpc Env(implantpb.Request) returns(clientpb.Task);
  rpc SetEnv(implantpb.Request) returns (clientpb.Task);
  rpc UnsetEnv(implantpb.Request) returns (clientpb.Task);
  rpc Whoami(implantpb.Request) returns (clientpb.Task);
  rpc Info(implantpb.Request) returns (clientpb.Task);
  rpc Bypass(implantpb.BypassRequest) returns (clientpb.Task);

  // implant::internal
  rpc ListModule(implantpb.Request) returns (clientpb.Task);
  rpc LoadModule(implantpb.LoadModule) returns (clientpb.Task);
  rpc RefreshModule(implantpb.Request) returns (clientpb.Task);
  rpc ListAddon(implantpb.Request) returns (clientpb.Task);
  rpc LoadAddon(implantpb.LoadAddon) returns (clientpb.Task);
  rpc ExecuteAddon(implantpb.ExecuteAddon) returns (clientpb.Task);
  rpc Clear(implantpb.Request) returns (clientpb.Task);
  rpc CancelTask(implantpb.ImplantTask) returns (clientpb.Task);

  // implant:execute
  rpc Execute(implantpb.ExecRequest) returns (clientpb.Task);
  rpc ExecuteSpawn(implantpb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteAssembly(implantpb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteEXE(implantpb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteDLL(implantpb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteArmory(implantpb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteShellcode(implantpb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecutePowershell(implantpb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteBof(implantpb.ExecuteBinary) returns (clientpb.Task);

  // jobs
  rpc ListJobs(clientpb.Empty) returns (lispb.Pipelines);
  // Websites
  rpc Websites(clientpb.Empty) returns (lispb.Websites);
  rpc Website(lispb.Website) returns (lispb.Website);
  rpc WebsiteRemove(lispb.Website) returns (clientpb.Empty);
  rpc WebsiteAddContent(lispb.WebsiteAddContent) returns (lispb.Website);
  rpc WebsiteUpdateContent(lispb.WebsiteAddContent)
      returns (lispb.Website);
  rpc WebsiteRemoveContent(lispb.WebsiteRemoveContent)
      returns (lispb.Website);

  // plugin
  //  rpc GetPlugins(clientpb.Empty) returns (clientpb.Plugins);
  //  rpc InstallPlugin(clientpb.Plugin) returns (clientpb.Empty);
}

service RootRPC {
  // manager
  rpc AddClient(rootpb.Operator) returns(rootpb.Response);
  rpc RemoveClient(rootpb.Operator) returns (rootpb.Response);
  rpc ListClients(rootpb.Operator) returns(clientpb.Clients);
  rpc AddListener(rootpb.Operator) returns (rootpb.Response);
  rpc RemoveListener(rootpb.Operator) returns (rootpb.Response);
  rpc ListListeners(rootpb.Operator) returns(clientpb.Listeners);
}