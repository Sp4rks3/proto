syntax = "proto3";

package clientrpc;
option go_package = "github.com/chainreactors/malice-network/helper/proto/services/clientrpc";

import "client/clientpb/client.proto";
import "client/rootpb/root.proto";
import "implant/implantpb/module.proto";
import "listener/lispb/listener.proto";

service MaliceRPC {
  // basic
  rpc LoginClient(clientpb.LoginReq) returns (clientpb.Client);
  rpc GetBasic(clientpb.Empty) returns (clientpb.Basic);
  rpc GetClients(clientpb.Empty) returns (clientpb.Clients);
  rpc GetSessions(clientpb.Empty) returns (clientpb.Sessions);
  rpc GetAlivedSessions(clientpb.Empty) returns (clientpb.Sessions);
  rpc GetSession(clientpb.SessionRequest) returns (clientpb.Session);
  rpc GetSessionLog(clientpb.SessionLog) returns (clientpb.TasksContext);
  rpc BasicSessionOP(clientpb.BasicUpdateSession) returns(clientpb.Empty);

  rpc GetListeners(clientpb.Empty) returns (clientpb.Listeners);
  rpc GetPipelines(clientpb.Empty) returns (lispb.Pipelines);
  rpc GetJobs(clientpb.Empty) returns (clientpb.Jobs);

  rpc GetTasks(clientpb.Session) returns (clientpb.Tasks);
  rpc GetTaskContent(clientpb.Task) returns (clientpb.TaskContext);
  rpc GetTaskFiles(clientpb.Session) returns(clientpb.Files);
  rpc WaitTaskContent(clientpb.Task) returns (clientpb.TaskContext);
  rpc WaitTaskFinish(clientpb.Task) returns (clientpb.TaskContext);
  rpc GetAllTaskContent(clientpb.Task) returns (clientpb.TaskContexts);

  rpc GetFiles(clientpb.Session) returns (clientpb.Files);
  // event
  rpc Events(clientpb.Empty) returns (stream clientpb.Event); // start listen events / register client
  rpc Broadcast(clientpb.Event) returns (clientpb.Empty); // broadcast event to all clients
  rpc Notify(clientpb.Event) returns (clientpb.Empty); // notify event to specific client
  rpc SessionEvent(clientpb.Event) returns (clientpb.Empty);

  // implant

  // implant::internal
  rpc Sleep(modulepb.Timer) returns (clientpb.Task);
  rpc Suicide(modulepb.Request) returns (clientpb.Task);
  rpc ListModule(modulepb.Request) returns (clientpb.Task);
  rpc LoadModule(modulepb.LoadModule) returns (clientpb.Task);
  rpc RefreshModule(modulepb.Request) returns (clientpb.Task);
  rpc ListAddon(modulepb.Request) returns (clientpb.Task);
  rpc LoadAddon(modulepb.LoadAddon) returns (clientpb.Task);
  rpc ExecuteAddon(modulepb.ExecuteAddon) returns (clientpb.Task);
  rpc Clear(modulepb.Request) returns (clientpb.Task);
  rpc CancelTask(modulepb.ImplantTask) returns (clientpb.Task);

  // implant::file
  rpc Upload(modulepb.UploadRequest) returns (clientpb.Task);
  rpc Download(modulepb.DownloadRequest) returns (clientpb.Task);
  rpc Sync(clientpb.Sync) returns (clientpb.SyncResp);

  // implant::fs
  rpc Pwd(modulepb.Request) returns (clientpb.Task);
  rpc Ls(modulepb.Request) returns (clientpb.Task);
  rpc Cd(modulepb.Request) returns (clientpb.Task);
  rpc Rm(modulepb.Request) returns (clientpb.Task);
  rpc Mv(modulepb.Request) returns (clientpb.Task);
  rpc Cp(modulepb.Request) returns (clientpb.Task);
  rpc Cat(modulepb.Request) returns (clientpb.Task);
  rpc Mkdir(modulepb.Request) returns (clientpb.Task);
  rpc Chmod(modulepb.Request) returns (clientpb.Task);
  rpc Chown(modulepb.ChownRequest) returns (clientpb.Task);

  // implant::sys
  rpc Kill(modulepb.Request) returns (clientpb.Task);
  rpc Ps(modulepb.Request) returns (clientpb.Task);
  rpc Netstat(modulepb.Request) returns (clientpb.Task);
  rpc Curl(modulepb.CurlRequest) returns (clientpb.Task);
  rpc Env(modulepb.Request) returns(clientpb.Task);
  rpc SetEnv(modulepb.Request) returns (clientpb.Task);
  rpc UnsetEnv(modulepb.Request) returns (clientpb.Task);
  rpc Whoami(modulepb.Request) returns (clientpb.Task);
  rpc Info(modulepb.Request) returns (clientpb.Task);
  rpc Bypass(modulepb.BypassRequest) returns (clientpb.Task);

  // implant::sys::reg
  rpc RegQuery(modulepb.RegistryRequest) returns (clientpb.Task);
  rpc RegAdd(modulepb.RegistryWriteRequest) returns (clientpb.Task);
  rpc RegDelete(modulepb.RegistryRequest) returns (clientpb.Task);
  rpc RegListKey(modulepb.RegistryRequest) returns (clientpb.Task);
  rpc RegListValue(modulepb.RegistryRequest) returns (clientpb.Task);

  // implant::sys::service
  rpc ServiceList(modulepb.Request) returns (clientpb.Task);
  rpc ServiceCreate(modulepb.ServiceRequest) returns (clientpb.Task);
  rpc ServiceStart(modulepb.ServiceRequest) returns (clientpb.Task);
  rpc ServiceStop(modulepb.ServiceRequest) returns (clientpb.Task);
  rpc ServiceQuery(modulepb.ServiceRequest) returns (clientpb.Task);

  // implant::sys::taskschd
  rpc TaskSchdList(modulepb.Request) returns (clientpb.Task);
  rpc TaskSchdCreate(modulepb.TaskScheduleRequest) returns (clientpb.Task);
  rpc TaskSchdStart(modulepb.TaskScheduleRequest) returns (clientpb.Task);
  rpc TaskSchdStop(modulepb.TaskScheduleRequest) returns (clientpb.Task);
  rpc TaskSchdDelete(modulepb.TaskScheduleRequest) returns (clientpb.Task);
  rpc TaskSchdQuery(modulepb.TaskScheduleRequest) returns (clientpb.Task);
  rpc TaskSchdRun(modulepb.TaskScheduleRequest) returns (clientpb.Task);

  // implant::sys:wmi
  rpc WmiQuery(modulepb.WmiQueryRequest) returns (clientpb.Task);
  rpc WmiExecute(modulepb.WmiMethodRequest) returns (clientpb.Task);

  // implant::sys:token
  rpc Runas(modulepb.RunAsRequest) returns (clientpb.Task);
  rpc Privs(modulepb.Request) returns (clientpb.Task);
  rpc GetSystem(modulepb.Request) returns (clientpb.Task);

  // implant:execute
  rpc Execute(modulepb.ExecRequest) returns (clientpb.Task);
  rpc ExecuteSpawn(modulepb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteAssembly(modulepb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecutePowerpick(modulepb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteEXE(modulepb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteDLL(modulepb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteArmory(modulepb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteShellcode(modulepb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteBof(modulepb.ExecuteBinary) returns (clientpb.Task);
  rpc ExecuteLocal(modulepb.ExecuteBinary) returns (clientpb.Task);

  // jobs
  rpc ListJobs(clientpb.Empty) returns (lispb.Pipelines);
  // Websites
  rpc Websites(clientpb.Empty) returns (lispb.Websites);
  rpc Website(lispb.Website) returns (lispb.Website);
  rpc WebsiteRemove(lispb.Website) returns (clientpb.Empty);
  rpc WebsiteAddContent(lispb.WebsiteAddContent) returns (lispb.Website);
  rpc WebsiteUpdateContent(lispb.WebsiteAddContent)
      returns (lispb.Website);
  rpc WebsiteRemoveContent(lispb.WebsiteRemoveContent)
      returns (lispb.Website);

  // generator
  rpc NewProfile(clientpb.Profile) returns (clientpb.Empty);
  rpc GetProfiles(clientpb.Empty) returns (clientpb.Profiles);
  rpc Generate(clientpb.Generate) returns(clientpb.Empty);
  rpc DownloadOutput(clientpb.Sync) returns (clientpb.SyncResp);
  rpc GetBuilders(clientpb.Empty) returns (clientpb.Builders);

  // plugin
  //  rpc GetPlugins(clientpb.Empty) returns (clientpb.Plugins);
  //  rpc InstallPlugin(clientpb.Plugin) returns (clientpb.Empty);
}

service RootRPC {
  // manager
  rpc AddClient(rootpb.Operator) returns(rootpb.Response);
  rpc RemoveClient(rootpb.Operator) returns (rootpb.Response);
  rpc ListClients(rootpb.Operator) returns(clientpb.Clients);
  rpc AddListener(rootpb.Operator) returns (rootpb.Response);
  rpc RemoveListener(rootpb.Operator) returns (rootpb.Response);
  rpc ListListeners(rootpb.Operator) returns(clientpb.Listeners);
}